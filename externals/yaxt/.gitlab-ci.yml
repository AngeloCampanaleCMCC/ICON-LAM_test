#run for all commits to the master branch and for merge requests
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# coverage:
#   - generates the coverage report data
# tests:
#   - run_test_*: build and test yaxt
#   - check_warning_*: checks output of run_test_* compiler outputs
#     - fails if it contains warings -> pipeline can still run
#       successfully, but with warning
# documentation:
#   - generate html doxygen documentation and html coverage report
# publish
#   - uploads html pages
stages:
  - tests
  - coverage
  - documentation
  - publish

.load_basic_modules: &load_basic_modules
  - . /sw/rhel6-x64/etc/profile.mistral && module use /sw/spack-rhel6/spack/modules/linux-rhel6-haswell
  - module purge
  - module load libtool autoconf automake git
  - module load python3/2020.02-gcc-9.1.0
  - module load autoconf/2.69 automake/1.16.1

.init_build:
  before_script:
    - *load_basic_modules
  tags:
    - mistral, singularity

.init_build_gcc_6_4:
  extends: .init_build
  before_script:
    - *load_basic_modules
    - module load gcc/6.4.0 openmpi/2.0.2p2_hpcx-gcc64 

.init_build_gcc_9_1:
  extends: .init_build
  before_script:
    - *load_basic_modules
    - module load gcc/9.1.0-gcc-7.1.0 openmpi/2.0.2p2-gcc-9.1.0

.init_build_intel:
  extends: .init_build
  before_script:
    - *load_basic_modules
    - module load gcc/4.8.2 intel/18.0.4 intelmpi/2018.4.274

.init_build_nag:
  extends: .init_build
  before_script:
    - *load_basic_modules
    - module load nag/6.2 openmpi/2.0.2p2_hpcx-nag62

.install_gcovr: &install_gcovr
  - export PATH=$PATH:$HOME/.local/bin
  - pip install gcovr==5.0

.check_warning:
  variables:
    GIT_STRATEGY: none
    AWK_SCRIPT: '/warning/ || /WARNING/ || /Warning/'
  script:
    - awk "$AWK_SCRIPT" $OUTPUT_FILE > awk.out
    - "if [ -s awk.out ]; then cat awk.out; exit 1; fi"
  allow_failure: true
  tags:
  - doxygen

gen_cov_data:
  stage: coverage
  dependencies: []
  extends: .init_build_gcc_6_4
  script:
    - export OMPI_MCA_btl_sm_use_knem=0
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - autoreconf -i
    - >
      ./configure
      CC=mpicc FC=mpifort
      FCFLAGS="-O0 -g -cpp -fprofile-arcs -ftest-coverage"
      CFLAGS="-O0 -g -Wall -fprofile-arcs -ftest-coverage"
    - make -j8 check
  artifacts:
    paths:
      - ./*.gcno
      - ./*/*.gcno
      - ./*/*/*.gcno
      - ./*/*/*/*.gcno
      - ./*.gcda
      - ./*/*.gcda
      - ./*/*/*.gcda
      - ./*/*/*/*.gcda
    expire_in: 5min

run_test_gcc_6_4:
  stage: tests
  extends: .init_build_gcc_6_4
  script:
    - export OMPI_MCA_btl_sm_use_knem=0
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - autoreconf -i
    - >
      ./configure
      CC=mpicc FC=mpifort
      FCFLAGS="-O0 -g -cpp"
      CFLAGS="-O0 -g -Wall"
      --disable-silent-rules
# build yaxt and unit tests without running tests
    - make -j8 check TESTS= XFAIL_TESTS= 2> >(tee make.err)
# run tests
    - make check
  artifacts:
    paths:
      - make.err
    expire_in: 5min

run_test_gcc_9_1:
  stage: tests
  extends: .init_build_gcc_9_1
  script:
    - export OMPI_MCA_btl_sm_use_knem=0
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - autoreconf -i
    - >
      ./configure
      CC=mpicc FC=mpifort
      FCFLAGS="-O2 -march=native"
      BUILD_FCFLAGS="-Wall -Wextra -Werror"
      CFLAGS="-O2 -march=native"
      BUILD_CFLAGS="-Wall -Wextra -Werror"
      --disable-silent-rules
# build yaxt and unit tests without running tests
    - make -j8 2> >(tee make.err)
# run tests
    - make check
  artifacts:
    paths:
      - config.log
      - make.err
    expire_in: 5min

run_test_intel:
  stage: tests
  extends: .init_build_intel
  script:
    - autoreconf -i
    - >
      ./configure
      FCFLAGS="-O0 -fpp -g"
      CFLAGS="-Wall -O0 -g"
      CC=mpiicc FC=mpiifort
      --disable-silent-rules
# build yaxt and unit tests without running tests
    - make -j8 check TESTS= XFAIL_TESTS= 2> >(tee make.err)
# run tests
    - make check
  artifacts:
    paths:
      - make.err
    expire_in: 5min

run_test_nag:
  stage: tests
  extends: .init_build_nag
  script:
    - export OMPI_MCA_btl_sm_use_knem=0
    - export OMPI_MCA_btl_vader_single_copy_mechanism=none
    - autoreconf -i
    - >
      ./configure
      FCFLAGS="-C=alias -C=array -C=bits -C=dangling -C=do -C=intovf -C=present -C=pointer -C=recursion -gline -nan -g -fpp -colour=warn:yellow -wmismatch=mpi_pack,mpi_unpack,mpi_bcast,mpi_send,mpi_recv,mpi_allreduce,mpi_isend,mpi_irecv,mpi_allgather,mpi_allgatherv,mpi_gather,mpi_gatherv,mpi_sendrecv,mpi_type_get_extent,xt_slice_c_loc -w=uda -w=alloctr -w=uep -w=x77 -f2008 -Wc,-pipe"
      CFLAGS="-O0 -g -pipe"
      BUILD_CFLAGS="-Wall -Werror"
      CC=mpicc FC=mpif90
      --disable-silent-rules
# build yaxt and unit tests without running tests
    - make -j8 check TESTS= XFAIL_TESTS= 2> >(tee make.err)
# run tests
    - make check
  artifacts:
    paths:
      - make.err
    expire_in: 5min

gen_doxy_html:
  stage: documentation
  needs:
    - job: gen_cov_data
      artifacts: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  script:
  - make -C doc
  - doxygen doc/Doxyfile 2> >(tee doxy.err)
  artifacts:
    expire_in: 5min
    paths:
    - doc/html
    - doxy.err
  tags:
  - doxygen

gen_cov_rep_html:
  stage: documentation
  needs:
    - gen_cov_data
  extends: .init_build_gcc_6_4
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  script:
    - *install_gcovr
    - mkdir coverage
    - cd src
    - >
      gcovr
      --html-details
      --exclude-unreachable-branches
      --print-summary
      -o ../coverage/index.html
      --root ..
      --object-directory .
      -e ../examples
      -e ../tests
      -e ../include
      -e ../perf
    - cd ..
    - mkdir coverage_tests
    - cd tests
    - >
      gcovr
      --html-details
      --exclude-unreachable-branches
      -o ../coverage_tests/index.html
      --root ..
      --object-directory .
      -e ../examples
      -e ../src
      -e ../include
      -e ../perf
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage/
      - coverage_tests/
    expire_in: 5min

check_warning_intel:
  stage: tests
  extends: .check_warning
  variables:
    OUTPUT_FILE: make.err
  needs:
    - run_test_intel

check_warning_gcc_6_4:
  stage: tests
  extends: .check_warning
  variables:
    OUTPUT_FILE: make.err
  needs:
    - run_test_gcc_6_4

check_warning_nag:
  stage: tests
  extends: .check_warning
  variables:
    OUTPUT_FILE: make.err
  needs:
    - run_test_nag

check_warning_doxy:
  stage: documentation
  extends: .check_warning
  variables:
    AWK_SCRIPT: '/warning/ && !/doc\/Doxyfile/ && !/doxygen -u/ && !/DOT_GRAPH_MAX_NODES/'
    OUTPUT_FILE: doxy.err
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  needs:
    - gen_doxy_html

pages:
  stage: publish
  variables:
    GIT_STRATEGY: none
  needs:
    - gen_cov_rep_html
    - gen_doxy_html
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  script:
  - mv doc/html/ public/
  - mv coverage/ public/coverage
  - mv coverage_tests public/coverage_tests
  artifacts:
    expire_in: 5min
    paths:
    - public
  tags:
  - doxygen

#generate coverage report for diff view of merge request
gen_cov_rep_xml:
  stage: documentation
  needs:
    - gen_cov_data
  extends: .init_build_gcc_6_4
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never
  script:
  script:
    - *install_gcovr
    - gcovr --xml-pretty --exclude-unreachable-branches -o coverage.xml --root .
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    expire_in: 1 week
    reports:
      cobertura: coverage.xml
